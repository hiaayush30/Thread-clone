import { createSlice } from '@reduxjs/toolkit'

export const serviceSlice = createSlice({
    name: 'service',
    //This name is primarily used to prefix the action types generated by RTK for that slice.
    initialState: {
        openAddPostModel: false,
        openEditProfileModel: false,
        openMainMenu: false,
        darkMode: true,
        myInfo: null,
        user: null,
        allPosts: [],
        postId: null,
        searchedUsers: [],
        userProfile: null
    },
    reducers: {
        setOpenAddPostModel: (state, action) => {
            state.openAddPostModel = action.payload;
        },
        setOpenEditProfileModel: (state, action) => {
            state.openEditProfileModel = action.payload;
        },
        setOpenMainMenu: (state, action) => {
            state.openMainMenu = action.payload;
        },
        setDarkMode: ((state, action) => {
            if (typeof action.payload !== "boolean") {
                console.log("invalid payload for darkMode");
                return;
            }
            state.darkMode = action.payload;
            if (action.payload === true) {
                document.body.classList.add('dark');
            } else {
                document.body.classList.remove('dark');
            }
        }),
        addMyInfo: (state, action) => {
            state.myInfo = action.payload.me
        },
        addUser: (state, action) => {
            state.user = action.payload;
        },
        setAllPosts: (state, action) => {
            const newPosts = [...action.payload];
            state.allPosts = [...state.allPosts, ...newPosts].sort((a,b)=> new Date(b.createdAt) - new Date(a.createdAt))
        },
        addSinglePost: (state, action) => {
            let updatedArr = [action.payload,...state.allPosts];
            state.allPosts = [...updatedArr].sort((a,b)=> new Date(b.createdAt) - new Date(a.createdAt));
        },
        deletePost: (state) => {
            let postArr = [...state.allPosts];
            let newArr = postArr.filter(e => e._id != state.postId);
            state.allPosts = newArr.sort((a,b)=> new Date(b.createdAt) - new Date(a.createdAt));;
        },
        addPostId: (state, action) => {
            state.postId = action.payload;
        },
        addToSearchUsers: (state, action) => {
            state.searchedUsers = action.payload;
        },
        setUserProfile: (state, action) => {
            state.userProfile = action.payload;
        }
    },
})

// Action creators are generated for each case reducer function
export const {
    addToSearchUsers,
    addPostId,
    deletePost,
    addSinglePost,
    setAllPosts,
    addUser,
    addMyInfo,
    setOpenAddPostModel,
    setDarkMode,
    setOpenEditProfileModel,
    setOpenMainMenu,
    setUserProfile } = serviceSlice.actions
export default serviceSlice.reducer