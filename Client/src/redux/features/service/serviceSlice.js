import { createSlice } from '@reduxjs/toolkit'

export const serviceSlice = createSlice({
    name: 'service',
    //This name is primarily used to prefix the action types generated by RTK for that slice.
    initialState: {
        openAddPostModel: false,
        openEditProfileModel: false,
        openMainMenu: false,
        darkMode: true,
        myInfo: null,
        user: null,
        allPosts: [],
        postId: null,
        searchedUsers: []
    },
    reducers: {
        setOpenAddPostModel: (state, action) => {
            state.openAddPostModel = action.payload;
        },
        setOpenEditProfileModel: (state, action) => {
            state.openEditProfileModel = action.payload;
        },
        setOpenMainMenu: (state, action) => {
            state.openMainMenu = action.payload;
        },
        setDarkMode: ((state, action) => {
            if (typeof action.payload !== "boolean") {
                console.log("invalid payload for darkMode");
                return;
            }
            state.darkMode = action.payload;
            if (action.payload === true) {
                document.body.classList.add('dark');
            } else {
                document.body.classList.remove('dark');
            }
        }),
        addMyInfo: (state, action) => {
            state.myInfo = action.payload.me
        },
        addUser: (state, action) => {
            state.user = action.payload;
        },
        setAllPosts: (state, action) => {
            const newPosts = [...action.payload];
            // if (state.allPosts.length === 0) {
            //     state.allPosts = newPosts;
            // }
            // const existingPosts = [...state.allPosts];
            // newPosts.forEach(post => {
            //     const existingIndex = existingPosts.findIndex(i => {
            //         return i._id == post._id
            //     });
            //     if (existingIndex != 1) {
            //         existingPosts[existingIndex] = post;
            //     } else {
            //         existingPosts.push(post);
            //     }
            // })
            state.allPosts =[...state.allPosts,...newPosts];
        },
        addSinglePost: (state, action) => {
            let updatedArr = [action.payload.newPost, ...state.allPosts];
            //all below will come in use when 'update post' function would be there
            let uniqueArr = new Set();
            let uniquePosts = updatedArr.filter(post => {
                if (!uniqueArr.has(post._id)) {
                    uniqueArr.add(post);
                    return true;
                }
                return false;
            })
            state.allPosts = uniquePosts;
        },
        deletePost: (state, action) => {
            let postArr = [...state.allPosts];
            let newArr = postArr.filter(e => e._id != state.postId);
            state.allPosts = newArr;
        },
        addPostId: (state, action) => {
            state.postId = action.payload;
        },
        addToSearchUsers: (state, action) => {
            state.searchedUsers = action.payload;
        }
    },
})

// Action creators are generated for each case reducer function
export const {
    addToSearchUsers,
    addPostId,
    deletePost,
    addSinglePost,
    setAllPosts,
    addUser,
    addMyInfo,
    setOpenAddPostModel,
    setDarkMode,
    setOpenEditProfileModel,
    setOpenMainMenu } = serviceSlice.actions
export default serviceSlice.reducer